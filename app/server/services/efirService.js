const EFIR = require('../models/EFIR');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

const generateEFIR = async (alert, generatedBy) => {
  try {
    // Generate FIR number
    const firNumber = `FIR/${new Date().getFullYear()}/${Math.random().toString(36).substr(2, 9).toUpperCase()}`;

    // Create PDF
    const doc = new PDFDocument();
    const pdfFileName = `efir-${firNumber.replace(/\//g, '-')}.pdf`;
    const pdfPath = path.join(__dirname, '../uploads/efir-documents', pdfFileName);
    
    // Ensure directory exists
    const dir = path.dirname(pdfPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    const writeStream = fs.createWriteStream(pdfPath);
    doc.pipe(writeStream);

    // Add content to PDF
    doc.fontSize(20).text('E-FIR Document', { align: 'center' });
    doc.moveDown();
    doc.fontSize(12).text(`FIR Number: ${firNumber}`);
    doc.text(`Generated At: ${new Date().toLocaleString()}`);
    doc.text(`Generated By: ${generatedBy}`);
    doc.moveDown();
    doc.text(`Tourist: ${alert.touristId.fullName}`);
    doc.text(`Phone: ${alert.touristId.phoneNumber}`);
    doc.text(`Email: ${alert.touristId.email}`);
    doc.moveDown();
    doc.text(`Alert Type: ${alert.type}`);
    doc.text(`Location: ${alert.location.coordinates.join(', ')}`);
    doc.text(`Description: ${alert.description}`);
    doc.moveDown();
    doc.text('Blockchain Transaction Hash:');
    doc.text(alert._id.toString()); // Using alert ID as mock hash

    doc.end();

    // Wait for PDF to be written
    await new Promise((resolve) => writeStream.on('finish', resolve));

    // Create EFIR record
    const efir = new EFIR({
      alertId: alert._id,
      firNumber,
      touristDetails: {
        fullName: alert.touristId.fullName,
        phoneNumber: alert.touristId.phoneNumber,
        email: alert.touristId.email
      },
      incidentDetails: {
        type: alert.type,
        location: alert.location,
        description: alert.description,
        occurredAt: alert.createdAt
      },
      generatedBy,
      pdfPath: pdfFileName
    });

    await efir.save();
    return efir;

  } catch (error) {
    console.error('E-FIR generation error:', error);
    throw error;
  }
};

module.exports = {
  generateEFIR
};